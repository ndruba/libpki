/* OpenCA libpki package
* (c) 2000-2007 by Massimiliano Pala and OpenCA Group
* All Rights Reserved
*
* ===================================================================
* Released under OpenCA LICENSE
*/

#ifndef _LIBPKI_PKI_DATATYPES_H
#define _LIBPKI_PKI_DATATYPES_H	

BEGIN_C_DECLS 

/* PKI Datatypes */
typedef enum {
	/* Driver(s) Datatype */
	PKI_DATATYPE_UNKNOWN = 0,
	PKI_DATATYPE_ANY,
	PKI_DATATYPE_APPLICATION,
	PKI_DATATYPE_PUBKEY,
	PKI_DATATYPE_PRIVKEY,
	PKI_DATATYPE_SECRET_KEY,
	PKI_DATATYPE_CRED,
	/* X509 types */
	PKI_DATATYPE_X509_KEYPAIR,
	PKI_DATATYPE_X509_CERT,
	PKI_DATATYPE_X509_CRL,
	PKI_DATATYPE_X509_REQ,
	PKI_DATATYPE_X509_PKCS7,
	PKI_DATATYPE_X509_CMS,
	PKI_DATATYPE_X509_PKCS12,
	PKI_DATATYPE_X509_OCSP_REQ,
	PKI_DATATYPE_X509_OCSP_RESP,
	PKI_DATATYPE_X509_PRQP_REQ,
	PKI_DATATYPE_X509_PRQP_RESP,
	PKI_DATATYPE_X509_XPAIR,
	PKI_DATATYPE_X509_CMS_MSG,
	/* Non-X509 types */
	PKI_DATATYPE_EST_MSG,
	PKI_DATATYPE_SCEP_MSG,
	/* Custom Type */
	PKI_DATATYPE_CUSTOM,
	/* Used in PKCS11 driver */
	PKI_DATATYPE_X509_CA,
	PKI_DATATYPE_X509_TRUSTED,
	PKI_DATATYPE_X509_OTHER
} PKI_DATATYPE;

#define PKI_DATATYPE_SIZE          26

/* Token Datatypes */
typedef enum {
	PKI_TOKEN_DATATYPE_UNKNOWN = 0,
	PKI_TOKEN_DATATYPE_KEYPAIR,
	PKI_TOKEN_DATATYPE_PRIVKEY,
	PKI_TOKEN_DATATYPE_PUBKEY,
	PKI_TOKEN_DATATYPE_CERT,
	PKI_TOKEN_DATATYPE_CACERT,
	PKI_TOKEN_DATATYPE_TRUSTEDCERT,
	PKI_TOKEN_DATATYPE_OTHERCERT,
	PKI_TOKEN_DATATYPE_CRL,
	PKI_TOKEN_DATATYPE_CRED,
	PKI_TOKEN_DATATYPE_NICKNAME,
	PKI_TOKEN_DATATYPE_IDENTITY
} PKI_TOKEN_DATATYPE;

#define PKI_TOKEN_DATATYPE_SIZE    12

typedef enum {
	/* Usual Ok */
	PKI_TOKEN_STATUS_OK						= 0,
	PKI_TOKEN_STATUS_LOGIN_OK           	= 1,
	// General Setup Errors
	PKI_TOKEN_STATUS_INIT_ERR				= 2,
	PKI_TOKEN_STATUS_LOGIN_ERR				= 4,
	// Key Crypto Errors
	PKI_TOKEN_STATUS_KEYPAIR_CHECK_ERR  	= 8,
	// Missing Data Errors
	PKI_TOKEN_STATUS_CERT_MISSING_ERR		= 16,
	PKI_TOKEN_STATUS_CACERT_MISSING_ERR		= 32,
	PKI_TOKEN_STATUS_OTHERCERTS_MISSING_ERR		= 64,
	PKI_TOKEN_STATUS_TRUSTEDCERTS_MISSING_ERR 	= 128,
	// Generic Errors
	PKI_TOKEN_STATUS_MEMORY_ERR				= 1024,
	PKI_TOKEN_STATUS_UNKNOWN				= 2048,
	// More Specific Errors
	PKI_TOKEN_STATUS_HSM_ERR			 	= 4096,
	PKI_TOKEN_STATUS_KEYPAIR_MISSING_ERR 	= 8192,
} PKI_TOKEN_STATUS;

#define PKI_TOKEN_STATUS_SIZE      10

/* Data Export Format */
typedef enum {
	PKI_DATA_FORMAT_UNKNOWN		= 0,
	PKI_DATA_FORMAT_PEM,
	PKI_DATA_FORMAT_ASN1,
	PKI_DATA_FORMAT_B64,
	PKI_DATA_FORMAT_TXT,
	PKI_DATA_FORMAT_XML,
	PKI_DATA_FORMAT_URL
} PKI_DATA_FORMAT;

#define PKI_DATA_FORMAT_SIZE        7
#define PKI_DATA_FORMAT_START       PKI_DATA_FORMAT_PEM
#define PKI_DATA_FORMAT_END         PKI_DATA_FORMAT_URL

typedef enum {
	PKI_DATA_FORMAT_FLAG_NONE		      = 0,
	PKI_DATA_FORMAT_FLAG_B64_SKIPNEWLINES = 1
} PKI_DATA_FORMAT_FLAG;

#define PKI_DATA_FORMAT_FLAG_SIZE   2

typedef enum {
	PKI_FORMAT_UNDEF		= 0,
	PKI_FORMAT_CMS,
	PKI_FORMAT_SCEP,
	PKI_FORMAT_NETSCAPE,
	PKI_FORMAT_PKCS11,
	PKI_FORMAT_SMIME,
	PKI_FORMAT_ENGINE
} PKI_FORMAT;

#define PKI_FORMAT_SIZE			7

/* Supported Datatype for retrieving data from an X509 data object */
typedef enum {
	PKI_X509_DATA_SERIAL		= 0,
	PKI_X509_DATA_VERSION,
	PKI_X509_DATA_SUBJECT,
	PKI_X509_DATA_ISSUER,
	PKI_X509_DATA_NOTBEFORE,
	PKI_X509_DATA_NOTAFTER,
	PKI_X509_DATA_THISUPDATE,
	PKI_X509_DATA_LASTUPDATE,
	PKI_X509_DATA_NEXTUPDATE,
	PKI_X509_DATA_PRODUCEDAT,
	PKI_X509_DATA_ALGORITHM,
	PKI_X509_DATA_KEYSIZE,
	PKI_X509_DATA_KEYPAIR_VALUE,
	PKI_X509_DATA_PUBKEY,
	PKI_X509_DATA_PUBKEY_BITSTRING,
	PKI_X509_DATA_PRIVKEY,
	PKI_X509_DATA_SIGNATURE,
	PKI_X509_DATA_SIGNATURE_ALG1,
	PKI_X509_DATA_SIGNATURE_ALG2,
	PKI_X509_DATA_TBS_MEM_ASN1,
	PKI_X509_DATA_SIGNER_CERT,
	PKI_X509_DATA_SIGNATURE_CERTS,
	PKI_X509_DATA_PRQP_SERVICES,
	PKI_X509_DATA_PRQP_STATUS_STRING,
	PKI_X509_DATA_PRQP_STATUS_VALUE,
	PKI_X509_DATA_PRQP_REFERRALS,
	PKI_X509_DATA_PRQP_CAID,
	PKI_X509_DATA_NONCE,
	PKI_X509_DATA_CERT_TYPE,
	PKI_X509_DATA_EXTENSIONS
} PKI_X509_DATA;

#define PKI_X509_DATA_SIZE     30

typedef enum {
	PKI_X509_CERT_TYPE_UNKNOWN	= 0,
	PKI_X509_CERT_TYPE_CA		= (1<<0),
	PKI_X509_CERT_TYPE_USER		= (1<<1),
	PKI_X509_CERT_TYPE_SERVER	= (1<<2),
	PKI_X509_CERT_TYPE_PROXY	= (1<<3),
	PKI_X509_CERT_TYPE_ROOT		= (1<<4)
} PKI_X509_CERT_TYPE;

#define PKI_X509_CERT_TYPE_SIZE  6

typedef enum {
	PKI_RSA_KEY_MIN_SIZE		= 1024,
	PKI_DSA_KEY_MIN_SIZE		= 2048,
	PKI_EC_KEY_MIN_SIZE		    = 256
} PKI_KEY_MIN_SIZE;

typedef enum {
	PKI_RSA_KEY_DEFAULT_SIZE	= 2048,
	PKI_DSA_KEY_DEFAULT_SIZE	= 2048,
	PKI_EC_KEY_DEFAULT_SIZE		= 256
} PKI_KEY_DEFAULT_SIZE;

END_C_DECLS

#endif
